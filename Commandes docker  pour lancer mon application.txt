////////////////////////////////////For Products Micro Service //////////////////////////////////////////
0-  Create container for API Product MicroService
docker build -t ecommerce-product-microservices:initial -f ./ProductMicroService/Dockerfile .

0.1 :  ex√©cuter l'image cr√©√©e 
docker run  -p 8080:8080   ecommerce-product-microservices:initial 

I- Cr√©ation du container pour mysql 

√âtape 1 : V√©rifier les pr√©requis
Avant de commencer, assure-toi que :
‚úÖ Docker Desktop est install√© et en cours d'ex√©cution.
‚úÖ Visual Studio 2022 est configur√© pour supporter Docker.
‚úÖ Le package NuGet Pomelo.EntityFrameworkCore.MySql est bien install√©.

√âtape 2 : Cr√©er un r√©seau Docker
On cr√©e un r√©seau Docker pour que les conteneurs MySQL et API puissent communiquer.

docker network create mynetwork-mysql-pomelo2
üëâ Ce r√©seau s'appelle mynetwork et servira √† connecter l'API et la base de donn√©es.

√âtape 3 : Cr√©er et d√©marrer un conteneur MySQL
docker run -d --name mysql-container-pomelo --network=mynetwork-mysql-pomelo2 -e MYSQL_ROOT_PASSWORD=MyLove@1988! -e MYSQL_DATABASE=ecommerceproductsdatabase -p 3306:3306 mysql:8.0

√âtape 3.1 : Lier le conteneur au r√©seau 
docker network connect mynetwork-mysql-pomelo2 mysql-container-pomelo

√âtape 4 : V√©rifier que les conteneurs fonctionnent
docker ps

√âtape 5 : copier le script sql dans le conteneur
docker cp WebApiDocker\scripts2.sql mysql-container-pomelo:/scripts.sql

√âtape 6 : Ex√©cuter le script sql 
docker exec -i mysql-container-pomelo sh -c "mysql -uroot -p'MyLove@1988!' ecommerceproductsdatabase < /scripts.sql"

√âtape 7 : V√©rifier que les conteneurs fonctionnent
docker ps

√âtape 8 : Tester la connexion √† mysql
docker exec -it mysql-container-pomelo mysql -uroot -p"MyLove@1988!"

SHOW DATABASES;
USE ecommerceproductsdatabase;
SHOW TABLES;
select * from  products;

√âtape 9 : Appeler une m√©thode de l'API
http://localhost:8080/api/products

2 - Cr√©ation du container pour webApi
docker build -t resayawebapi -f WebApiDocker/Dockerfile .
docker build --no-cache -t resayawebapi -f WebApiDocker/Dockerfile .

3 -  on ex√©cute le container
docker run -d --name resayawebapi-container --network mynetwork-mysql-pomelo2 -p 8080:8080 -e MYSQL_HOST=mysql-container-pomelo -e MYSQL_PASSWORD=MyLove@1988! resayawebapi

3.1 - on ex√©cute le container avec l'image qui sur Docker hub 
docker run -p 8080:8080 --network=mynetwork-mysql-pomelo2 -e MYSQL_HOST=mysql-container-pomelo  -e MYSQL_PASSWORD=MyLove@1988!  dabson1988/ecommerce-products-microservice:v1.0

4 - on lie le container webApi au container pomelo 
docker network connect  mynetwork-mysql-pomelo2  resayawebapi-container 

/////////////////////////////////////////////////////////////////////////////////////////////

-- create image for  UserMicroService
docker build -t  usermicroservice-image:1.0 .

-- execute docker compose User in  back
docker-compose -f docker-compose.user.yml down
docker-compose -f docker-compose.user.yml up -d

-- create image for  productMicroService
docker build -t  productmicroservice-image:1.0 .
docker build -t  productmicroserviceapi:latest .

-- execute docker compose Products in back
docker-compose -f docker-compose.product.yml down
docker-compose -f docker-compose.product.yml up -d

-- create image for  OrderMicroService
docker build -t  ordermicroservice-image:1.0 .

-- execute docker compose order in  back
docker-compose -f docker-compose.order.yml down
docker-compose -f docker-compose.order.yml up -d

-- connect to mongo db database
docker exec -it mongo-db mongosh

-- create image for  ApiMicroService Getway
docker build -t  getway-api-image:1.0 .

-- execute docker compose webapi in  back
docker-compose -f  docker-compose-getwayApi.yml down
docker-compose -f  docker-compose-apigetway.yml up -d

-- V√©rifier si les conteneur √©coute aux port 80
docker exec -it orders-api netstat -tuln
docker exec -it users-api netstat -tuln
docker exec -it products-api netstat -tuln

-- execute docker compose commun
docker-compose -f  docker-compose.commun.yml up -d
docker-compose -f  docker-compose.commun.yml down

-- Pour tout supprimer 
docker-compose -f docker-compose.commun.yml down --rmi all

-- create docker  image 
docker stop angular-client-dev
docker build -t angular-client-image-devfix:1.0 .
docker-compose -f docker-compose.angular2.yml up --build

docker run --name my-angular-client -p 4200:80 angular-client-image:1.0

--- Create all image fimes
docker build -t  usermicroservice-image:1.0 .
docker build -t  productmicroservice-image:1.0 .
docker build -t  ordermicroservice-image:1.0 .
docker build -t  getway-api-image:1.0 .
docker build -t angular-client-image-devfix:1.0 .

--- create all contenairs with docker compose
docker-compose -f  docker-compose.commun.yml up -d
docker-compose -f  docker-compose.commun.yml down

------  Autres commandes 

docker-compose -f docker-compose.angular2.yml  up -d --build

docker-compose -f docker-compose-order.yml  up -d --build

docker-compose -f  docker-compose-apigetway.yml  up -d --build

docker-compose -f docker-compose-order.yml  down

docker exec -it api-gateway sh
docker exec -it orders-api sh
docker exec -it user-postgres sh

docker exec -u root -it users-api sh
orders-api http://localhost:5000/gateway/products

docker exec -u root -it users-api sh

docker exec -u root -it mysql-db sh

-- se connecter au conteneur  mysql 
docker exec -it mysql-db bash

-- se connecter en tant que root pour ex√©cuter une requ√™te mysql 
mysql -u root -p
